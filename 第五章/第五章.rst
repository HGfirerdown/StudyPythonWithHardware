第5章 控制LED，制作跑马灯

5.1 控制开发板的led灯
---------------------

LED（Light Emitting
Diode），又称为发光二极管，如图5-1所示，是一种能够将电能转化为可见光的固态的半导体器件，它可以直接将电转化为光。LED的心脏其实是一个半导体的晶片，晶片附在一个支架上，引出两根引线，一根是电源的负极，另一根是电源的正极，接通电源后，整个LED灯就可以发光。由于LED的体积极小并且很脆弱，不便于直接使用。通常会用一个保护外壳将它封存在内部，这样就构成了易于使用的LED灯珠。

.. image:: /Chapter/picture/image083.jpg

图5-1 LED灯

半导体晶片由两部分组成，一部分是P型半导体，在它里面空穴占主导地位，另一端是N型半导体，在这边主要是电子。将这两种半导体连接起来的时候，它们之间就形成了一个P-N结。当电流通过导线作用于这个晶片的时候，N型半导体内的电子就会被推向P型半导体，在P型半导体里电子与空穴在发光层剧烈地碰撞复合产生光子，然后以光子的形式发出能量，这就是LED灯发光的原理。具体如图5-2所示。而光的波长也就是光的颜色，是由形成P-N结的材料决定的。

LED还具有以下几大特点：

1.
低能耗：LED的工作电压低，采用直流驱动方式，超低功耗（单管0.03~0.06W），电光功率转换接近100%，在相同照明效果下比传统光源节能80%以上。白光LED的能耗仅为白炽灯的1/10，节能灯的1/4。

2.
长寿命：灯体内没有松动的部分，不存在灯丝发光易烧、热沉积、光衰等缺点，使用寿命可达6万~10万小时，是传统光源使用寿命的10倍以上。

.. image:: /Chapter/picture/image084.png

图5-2 LED的发光原理

3.
环保：LED运用冷光源，眩光小，无辐射，使用中不产生有害物质。同时光谱中没有紫外线和红外线，而且废弃物可回收，没有污染，不含铅、汞等污染元素，可以安全触摸，属于典型的绿色照明光源。

4.
安全：固态封装，属于冷光源类型。便于运输和安装，可以被装置在任何微型和封闭的设备中，不怕振动。

5. 宽电压：85V~ 264VAC全电压范围恒流，保证寿命及亮度不受电压波动影响。

LED光源的应用非常灵活，可以做成点、线、面各种形式的轻薄短小产品；LED的控制也极为方便，只要调整电流大小，就可以随意调整光的亮度；不同光色的组合变化多端，利用时序控制电路，更能达到丰富多彩的动态变化效果。因此，LED已经被广泛应用于各种照明设备中，如图5-3所示，例如：电池供电的闪光灯、微型声控灯、安全照明灯、室外道路和室内楼梯照明灯以及建筑物与标记连续照明灯。

.. image:: /Chapter/picture/image085.jpg
图5-3 无处不在的LED

5.1.1 Skids的LED

Skids集成了4个LED，在液晶显示屏幕的上方，如图5-4所示，其颜色分别为红、黄、蓝、绿。

.. image:: /Chapter/picture/image086.jpg

图5-4 Skids的LED

Skids使用通用IO端口进行相应LED的控制。Skids通用IO端口描述如表5-1所示。每一个端口都可以由软件设置来满足各种系统配置和设计需求。在启动程序之前，必须定义每个引脚使用哪个功能。

表5-1 Skids通用IO端口描述

+--------------+-----------------+
| **端口名称** | **端口号.**     |
+--------------+-----------------+
| LED控制使能  | PIN 2           |
+--------------+-----------------+
| LED1         | PIN 14 （红色） |
+--------------+-----------------+
| LED2         | PIN 32 （黄色） |
+--------------+-----------------+
| LED3         | PIN 33 （蓝色） |
+--------------+-----------------+
| LED4         | PIN 27 （绿色） |
+--------------+-----------------+

5.1.2 控制Skids的LED

在这种应用中，需要将相应的端口设置为输出口，当输出口为0时，LED亮，当输出口为1时，LED熄灭。

下面以LED1为例，介绍如何通过程序控制Skids上的LED灯的开启与关闭。

#导入用于引脚控制的Python库

from machine import Pin

#获取引脚

led_en = Pin(2, Pin.OUT)

led1 = Pin(14, Pin.OUT)

#使能LED控制

led_en.value(1)

#开启LED1

led1.value(0)

其中，machine库提供了与硬件设备相关的操作接口和类，其中Pin类定义了MCU引脚相关的配置。程序的主要步骤依次为：初始化变量设置LED状态开启LED1。程序执行后，发现LED1保持常亮的状态，思考能否通过修改代码使LED1产生闪烁的效果。

所谓闪烁的效果，就是要求LED1开启一段时间后，再自动关闭LED1，再经过一段时间后，重启点亮LED1，依次在开启和关闭状态间进行切换。对应程序功能如图5-5所示。

.. image:: /Chapter/picture/image087.png
图5-5 LED1闪烁流程图

对应的程序代码如下：

#导入用于引脚控制的Python库

from machine import Pin

#导入time库

import time

#获取引脚

led_en = Pin(2, Pin.OUT)

led1 = Pin(14, Pin.OUT)

#使能LED控制

led_en.value(1)

#开启LED1

led1.value(0)

#延时1秒

time.sleep(1)

#关闭LED1

led1.value(1)

#延时1秒

time.sleep(1)

#重新开启LED1

led1.value(0)

#延时1秒

time.sleep(1)

#关闭LED1

led1.value(1)

其中，time库用来获取时间和日期、测量时间间隔、延时时间等。上面的程序只要求LED开启和关闭两次，如果要开启和关闭LED一百次呢，代码如何书写？难道上面的语句要重复100遍？

在分析实际问题时，我们经常会遇到一些具有规律性的重复操作。当用程序来解决问题时，通过重复执行某些代码块来到达目的，这就是Python程序中的循环结构。

5.2 认识循环结构
----------------

现实生活中，有很多循环的场景，例如，红绿灯交替是一个重复的过程，春夏秋冬一年四季的更替也是一个重复的过程，甚至我们同学每天的大学生活也是一个循环往复的过程。

循环结构可以减少源程序重复书写的工作量，用来描述重复执行某段算法的问题，这是程序设计中最能发挥计算机特长的程序结构。循环结构可以看成是一个条件判断语句和一个循环体的组合，如图5-6所示。

.. image:: /Chapter/picture/image088.png
图5-6 循环结构流程图

被重复执行的代码块叫作循环体，能否继续重复执行取决于循环条件。当条件成立的时候，执行循环体的代码，当条件不成立的时候，跳出循环，执行循环结构后面的代码。

5.3 循环语句
------------

在程序中，若想重复执行某些操作，可以使用循环语句实现。Python中提供了两种循环语句，分别是while循环和for循环。

注意：Python中没有do-while循环。

5.3.1 while循环语句

Python中while语句的一般形式：

while 判断条件：

循环体

判断条件表达式，如果其为真（True），则执行循环体，执行完一次再次判断条件表达式，直到其为假（False），则跳出循环。

while循环包含3部分，一是循环变量的初始化；二是循环条件；三是循环体。其中循环体中有时需要包含循环变量的变化，循环体中的语句向右边缩进。

【案例5-1】计算1到100的总和。

sum = 0 #存放结果变量初始化

i = 0 #循环变量初始化

while i<=100: #循环条件

sum = sum + i

i = i + 1 #循环变量的变化

print(" 1 到 100 之和为: %d" %sum)

这个循环的循环体只有两条语句，其中i=i+1是循环变量的变化语句。i<=100是循环条件，当循环条件成立时，就一直执行循环体，如果条件不成立时，则结束循环操作。

在某些情况下，循环条件也可能是一个逻辑表达式，它的值为真或为假。循环体也可能是一条单一的语句，也可能是语句块。

如果while循环的条件一开始就不成立，那么while循环一次也不会执行。但是，有时候，我们又希望循环是无限的，可以通过设置判断条件永远为True来实现无限循环，无限循环在服务器上客户端的实时请求非常有用。

【案例5-2】输入5个同学的成绩，计算平均成绩。

分析：设计一个5次的循环，每次输入一个同学的成绩m，把成绩累计在一个总成绩变量s中，最后计算平均成绩输出，程序如下：

s = 0

i = 0

while i < 5 :

m = input("第"+str(i)+ "个成绩：")

m = float(m)

s = s + m

i = i + 1

print("平均成绩：", s / 5)

在某些情况下，循环结构中还会配合使用选择判断，最常见的是if判断，用来完成数据的筛选工作或列出做事的前提条件。

【案例5-3】计算1~100以内的偶数和。

分析：在整数中，能被2整除的数，称为偶数。也可以表示成，除以2以后余数为0的数称为偶数。具体代码如下：

i = 0

sumResult = 0

while i<101:

if i %2 = =0:

sumResult = sumResult + i

i = i + 1

print("1~100之间的偶数之和为：%d"%sumResult)

5.3.2 for循环语句

循环语句除了while循环以外，还有一种for循环语句。Python中的for循环可以遍历任何序列的项目，如一个列表或者一个字符串。

for循环的基本格式如下：

for 变量 in 序列：

循环体

例如，使用for循环遍历列表，示例代码如下：

for i in [0,1,2]：

print(i)

输出结果：

0

1

2

上述示例中，for循环可以将列表中的数值逐个显示。

考虑到我们使用的数值范围经常变化，Python提供了一个内置的range(
)函数，它可以生成一个数字序列。range(
)函数在for循环中的格式分为以下几种情况。

1. 有start、end、step

for 循环变量 in range(start , end, step)：

循环体

1)
如果step>0，那么循环变量会从start开始增加，沿正方向变化，一直等于或者超过end后循环停止；如果一开始就start>=end，则已经到停止条件，循环一次也不执行。

2)
如果step<0，那么变量会从start开始减少，沿负方向变化，一直到负方向等于或者超过end后循环停止；如果一开始就start<=end，则已经到停止条件，循环一次也不执行。

2. 只有stop值

for 循环变量 in range(end)：

循环体

循环变量的值从0开始，按step=1的步长增加，一直逼近end，但不等于end，直到end的前一个值，即end-1。

3. 只有start和stop值

for 循环变量 in range(start , end)：

循环体

   1) 如果start>end，则循环一次也不执行。

   2)
   如果start<=end，循环变量的值从start开始，按step=1的步长增加，一直逼近end，但不等于end，直到end的前一个值，即end-1。

注意：

1. 循环体的语句向右边缩进。

2. 不写start时,start = 0；不写step时,step = 1。

3.
在使用range(start,end)函数时，循环正常退出时循环变量的值等于end-1，而并非end。

【案例5-4】计算1到100的总和。

s = 0

for i in range(101):

s = s + i

print(" 1 到 100 之和为: %d" %s)

实际上，for与while在大多数情况下是可以相互替代的。最大的不同是：while循环的循环变量在while之前要初始化，变量的变化要自己控制，循环条件要自己写；相对来说，for循环要简单一些，因为for循环的变量变化时有规律的等差数列变化，而while循环的变量变化可以是任意的。因此，如果循环变量是有规律变化的，那么建议使用for循环；如果循环变量是无规律变化的，建议使用while循环。

【案例5-5】计算1~100以内的偶数和。

s = 0

for i in range(2,101,2):

s = s + i

print("1~100之间的偶数之和为：%d"%s)

5.4 学习break和continue
-----------------------

在编写循环结构时，很容易就会出现下列的错误。

i = 0

while i<4：

print(i)

在这个例子中，循环变量i永远为0不变化，i<4永远成立，程序不停输出0，成为永远不停止的死循环。

如果循环条件一直为真，永远不会变为假，则该循环会循环无限次，出现死循环。程序如果出现死循环，计算机将永远执行循环语句，别的语句将得不到执行。

其中一种解决办法，就是在循环体添加中断语句，从而保证程序有出口。修改程序如下：

i = 0

while i<4：

print(i)

if i%2= =0：

break

.. image:: /Chapter/picture/image089.png
图5-7 循环结构中的break

5.4.1 break语句

Python中的break语句，常用于满足某个条件，需要立刻退出当前循环，即使循环条件仍然满足或者序列还没被完全递归完，也会立即停止执行循环语句。break语句可以用在for循环和while循环语句中。在循环结构中，一旦执行到break语句，循环体中在其后边的代码将不会被执行，直接退出循环，流程如图5-7所示。

Python中的break语句和C语言中的break语句相类似，都是用来结束当前循环然后跳转到下条语句。常用来表示某个外部条件被触发，一般通过结合if判断来完成。在嵌套循环中，当执行到break语句时将停止执行最内层的循环，并开始执行外层循环下一轮操作。

【案例5-6】判断n是否为素数。

分析：素数又称质数。是指整数在一个大于1的自然数中，除了1和此整数自身外，无法被其他自然数整除的数。换句话说，只有两个正因数（1和自身）的自然数即为素数。因此，判断n是否为素数，只需要将2~n-1之间的所有数去整除n，如果存在某个数能整除n，则后面的数字不用再去整除判断，即可判定n不是素数，否则，n即为素数。

n = input(＂Enter n:＂)

n = int(n)

for d in range(2,n):

if n%d= =0:

break

if d= =n-1:

print(n, ＂is a prime＂)

else:

print(n, ＂is not a prime＂)

运行结果：

Enter n:12

12 is not a prime

图5-8 循环结构中的continue

.. image:: /Chapter/picture/image090.png
5.4.2 continue语句

相比break语句的直接退出循环结构不同，continue语句用来告诉Python跳过当前循环的剩余语句，然后继续进行下一轮循环，流程如图5-8所示。

注意：

1. break/continue只能用在循环中，除此以外不能单独使用。

2. break/continue在嵌套循环中，只对最近的一层循环起作用。

3. break语句跳出整个循环体，循环体中未执行的循环将不会执行。

4. continue语句跳出本次循环，只跳过本次循环continue后的语句。

【案例5-7】打印10以内的奇数。

分析：可以设置一个0~10的循环结构，如果某个数能被2整除，那么这个数就不是奇数，跳出本次循环，进行下一个数字的判断，反之，这个数不能被2整除，那么这个数肯定是奇数，进行打印。

n = 0

while n<10:

n = n + 1

if n%2==0: #如果n是偶数，执行continue语句

continue

print(n)

5.5 循环的嵌套
--------------

在一个复杂的程序中，一个循环往往还包含另外一个循环，形成循环嵌套。循环嵌套既可以是
for-in 循环嵌套，也可以是 while
循环嵌套，即各种类型的循环都可以作为外层循环，各种类型的循环也都可以作为内层循环。

当程序遇到循环嵌套时，如果外层循环的循环条件允许，则开始执行外层循环的循环体，而内层循环将被作为外层循环的循环体来执行。当内层循环执行结束且外层循环的循环体也执行结束后，将再次计算外层循环的循环条件，决定是否再次开始执行外层循环的循环体。

假设外层循环的循环次数为 n 次，内层循环的循环次数为 m
次，那么内层循环的循环体实际上需要执行 n ×
m 次。循环嵌套的执行流程图如图 5-9所示：

.. image:: /Chapter/picture/image091.png
图5-9 循环嵌套的执行流程图

循环嵌套就是把内层循环当成外层循环的循环休。只有内层循环的循环条件为假时，才会完全跳出内层循环，才可以结束外层循环的本次循环，开始下一次外层循环。

5.5.1 while循环嵌套

同if嵌套类似，while的嵌套指的是while里面还包含了while，具体格式如下：

while 条件1:

条件1满足时，做的事情1

条件1满足时，做的事情2

条件1满足时，做的事情3

…（省略）…

while 条件2：

条件2满足时，做的事情1

条件2满足时，做的事情2

条件2满足时，做的事情3

…（省略）…

有关上述格式的相关说明如下：

1.
当满足循环条件1时，执行满足条件1时要做的事情，此时可能会有执行内部嵌套的循环的机会。

2.
当满足循环条件2时，执行满足条件2时要做的事情，直至整个里面的while循环结束。

3.
当不满足循环条件2时，退出内部循环，继续执行外部循环的后续操作，等外部循环要做的事情执行完以后，结束整个外部的while循环。

【案例5-8】打印如下的三角形。

\*

\* \*

\* \* \*

\* \* \* \*

\* \* \* \* \*

分析：这个三角形的规律是，第1行显示一个*号，第2行显示两个*号，以此类推。使用while循环嵌套来实现，可以使用外层循环来控制行，内层循环控制要显示的*个数。

i = 1

while i<6:

j = 0

while j<i:

print("\* ",end='')

j+=1

print("\n",end='')

i+=1

说明：

1. 外层循环中的i用于控制图形的行，内层循环中的j用于控制每行打印的*个数。

2.
print函数在输出后就自动换行。实际上，只要在输出函数中设置end值就可以控制它不换行。print("*",end='')代表在*输出后不做任何事情。

【案例5-9】打印九九乘法表。

+-------+--------+--------+--------+--------+--------+--------+--------+--------+
| 1×1=1 |        |        |        |        |        |        |        |        |
+-------+--------+--------+--------+--------+--------+--------+--------+--------+
| 2×1=2 | 2×2=4  |        |        |        |        |        |        |        |
+-------+--------+--------+--------+--------+--------+--------+--------+--------+
| 3×1=3 | 3×2=6  | 3×3=9  |        |        |        |        |        |        |
+-------+--------+--------+--------+--------+--------+--------+--------+--------+
| 4×1=4 | 4×2=8  | 4×3=12 | 4×4=16 |        |        |        |        |        |
+-------+--------+--------+--------+--------+--------+--------+--------+--------+
| 5×1=5 | 5×2=10 | 5×3=15 | 5×4=20 | 5×5=25 |        |        |        |        |
+-------+--------+--------+--------+--------+--------+--------+--------+--------+
| 6×1=6 | 6×2=12 | 6×3=18 | 6×4=24 | 6×5=30 | 6×6=36 |        |        |        |
+-------+--------+--------+--------+--------+--------+--------+--------+--------+
| 7×1=7 | 7×2=14 | 7×3=21 | 7×4=28 | 7×5=35 | 7×6=42 | 7×7=49 |        |        |
+-------+--------+--------+--------+--------+--------+--------+--------+--------+
| 8×1=8 | 8×2=16 | 8×3=24 | 8×4=32 | 8×5=40 | 8×6=48 | 8×7=56 | 8×8=64 |        |
+-------+--------+--------+--------+--------+--------+--------+--------+--------+
| 9×1=9 | 9×2=18 | 9×3=27 | 9×4=36 | 9×5=45 | 9×6=54 | 9×7=63 | 9×8=72 | 9×9=81 |
+-------+--------+--------+--------+--------+--------+--------+--------+--------+

分析：九九乘法表的整体排列和案例5-8中的图形类似，不同的是，之前每个*号变成了乘法表中的每个乘法算式。如果使用while嵌套循环来实现，同样使用变量i来控制行号，它从1变化到9；变量j来控制列号，它也从1变化到9，这样输出i*j的值即为九九乘法表中的值。程序如下：

i=1

while i<10:

j=1

while j<=i:

print("%d*%d=%d "%(i,j,i*j),end='')

j+=1

print("\n",end='')

i+=1

5.5.2 for-in循环嵌套

同while循环嵌套类似，for循环嵌套指的是for-in里面还包含了for-in，具体格式如下：

for 循环变量 in 序列:

for 循环变量 in 序列:

语句块

语句块

有关上述格式的相关说明如下：

1.
第一个for-in控制外层循环执行的次数，第二个for-in控制内层循环执行的次数。

2. 内层的for-in循环同时又是外层循环的循环体中的一部分。

【案例5-10】打印出1、2、3这三个数字的所有排列。

分析：所谓的排列是指从给定个数的元素中取出指定个数的元素再进行排序。全排列是指所有个体全部参与排列。而在该题中，显然属于全排列，因此排列数为6种（3!）情况。

for i in range(1,4):

for j in range(1,4):

for k in range(1,4):

if i!=j and j!=k and i!=k:

print(i,j,k)

运行结果：

1 2 3

1 3 2

2 1 3

2 3 1

3 1 2

3 2 1

【案例5-11】找出2~100之间的所有素数。

分析：在案例5-6中已经掌握了如何去判断一个整数n是否为素数，要找出2~100之间的所有素数，只要把n作为一个循环变量，从2循环到100为止即可。程序如下：

count = 0

for n in range(2,101):

#flag标志素数

flag = 1

for m in range(2,n):

if n%m= =0:

#如果能整除，那么n不是素数，flag=0，退出m的内循环

flag = 0

break

if flag==1:

print("%5d"%n,end='')

count+=1

if count%5= =0:

print()

运行结果：

2 3 5 7 11

13 17 19 23 29

31 37 41 43 47

53 59 61 67 71

73 79 83 89 97

说明：

1.
这里使用了flag标志位来区分素数，也可以像案例5-6一样，使用循环变量的值来区分素数。

2. print()等价于print("\n",end='')。

3. %5d代表当输出结果位数不足5位时，在其左侧补以相应数量的空格。

5.5.3 while和for-in混合嵌套

一个循环的循环语句可以是一个复合语句，在复合语句中又包含一个循环，由此就构成了循环的嵌套。除了前面介绍的while循环嵌套和for-in循环嵌套外，还可以在while循环中嵌入for-in循环，反之，也可以在for-in循环中嵌入while循环。

5.5.4 循环嵌套的退出

如果有两个循环嵌套，那么内部循环执行break时仅仅退出内部循环，而不是退出外部循环，外部循环执行break时退出外部循环。即break只退出它所在的那层循环，不会因为内部循环的一个break而使得整个循环都退出。例如：

for i in range(1,4):

print("进入内层循环")

for j in range(1,4):

print(i,j)

if j%2==0:

break

print("退出内层循环")

print("退出外层循环")

运行结果：

进入内层循环

1 1

1 2

退出内层循环

进入内层循环

2 1

2 2

退出内层循环

进入内层循环

3 1

3 2

退出内层循环

退出外层循环

由此可见，break是退出内部的j循环，而不是退出外部的i循环。

5.6 制作跑马灯效果
------------------

5.6.1 预备知识

在前面的5.1.2节中，采用顺序结构实现了LED灯的开启与关闭。程序实现的主要步骤为：开启LED1延时后关闭LED1延时后开启LED1延时后关闭LED1。程序只完成了LED开启和关闭两次，对于开启和关闭LED一百次的要求，显然通过顺序结构完成不太现实。掌握了循环结构的用法，了解到通过循环结构可以轻松的实现LED开启关闭一百次的要求。

本节要求利用学过的循环结构，来实现LED跑马灯的效果。这里所谓的跑马灯效果，即按照LED灯的顺序，每次点亮一盏LED。具体流程如图5-10所示：

.. image:: /Chapter/picture/image092.png

图5-10 跑马灯的流程图

通过上面的流程图可以发现，除了每次开启的LED灯的编号的变化，其他每次操作都是重复的，于是考虑采用循环结构来实现，流程修改如下：

.. image:: /Chapter/picture/image093.png

图5-11 修改后的跑马灯流程图

5.6.2 任务要求

1.
通过前面循环结构的学习，掌握了循环结构的用法，了解到通过循环结构可以轻松的实现LED开启关闭一百次的要求。

2.
利用学过的循环结构，来实现LED跑马灯的效果，即LED灯依次亮起熄灭，不断循环往复。

5.6.3 任务实施

具体做法：将开启关闭LED的操作作为一个循环体，设置一个循环变量进行一百次的计数作为循环条件，即可实现上述要求。

程序如下：

count = 0

while count<100:

led1.value(0) #开启LED1

time.sleep(3)

led1.value(1) #关闭LED1

time.sleep(3)

count = count + 1

同样，对于实现不停的LED灯的开启和关闭操作，也可以通过循环结构来完成，只需要将循环的条件设置为始终为True即可。程序修改如下：

while True:

led1.value(0)

time.sleep(3)

led1.value(1)

time.sleep(3)

其中，关闭所有LED的操作，可以通过将LED1~LED4存入一个数组中，然后采用循环结构来依次关闭，具体代码如下：

#定义LED数组

leds = [led1, led2, led3, led4]

#将所有LED关闭

for l in leds:

l.value(1)

修改后的流程图5-12中，开启下一盏LED的操作，具体开启顺序为：
.. image:: /Chapter/picture/image094.png

图5-12 LED开启顺序

第一次启动程序后，先开启LED1，然后按照LED的顺序依次开启，当开启LED4后，下一次需要重新开启LED1，具体代码如下：

#定义LED数组

leds = [led1, led2, led3, led4]

#初始化循环变量

i = 0

#开始循环

while True:

#开启特定的LED

leds[i].value(0)

#计算下一个需要开启的LED编号

i = (i+1)%4

注意：

为了保证开启LED4后，下一次顺利开启LED1，需要将循环变量的改变设置为i=(i+1)%4。

为保证能够在Skids开发板上实现跑马灯的效果，还需要在程序运行前，完成引脚的一些初始化操作，以及LED灯的使能控制等操作。完整程序代码如下：

from machine import Pin

import time

#获取引脚

led_en = Pin(2, Pin.OUT)

led1 = Pin(14, Pin.OUT)

led2 = Pin(27, Pin.OUT)

led3 = Pin(33, Pin.OUT)

led4 = Pin(32, Pin.OUT)

#定义LED数组，以便于后续操作

leds = [led1, led2, led3, led4]

#使能LED控制

led_en.value(1)

#初始化循环变量

i = 0

#开始循环

while True:

#将所有LED关闭

for l in leds:

l.value(1)

#开启特定的LED

leds[i].value(0)

#计算下一个需要开启的LED编号

i = (i+1)%4

#延时1秒

time.sleep(1)

思考：

1. 调整LED的变化周期，由1秒改为3秒

2.
修改跑马灯的效果：首先点亮LED4；然后熄灭LED4，点亮LED3；然后熄灭LED3，点亮LED2；再熄灭LED2，点亮LED1；再熄灭LED1，点亮LED4……

3.
实现一个流水灯的效果：4个LED同时亮，然后逐个熄灭，之后再逐个点亮，再逐个熄灭……

.. _本章小结-4:

5.7 本章小结
------------

在本章节中，主要学习了Python语言中的循环结构，掌握了循环结构的表现形式。在程序开发中，循环结构主要通过for语句和while语句来实现，在一些复杂的情况下，还可以通过循环嵌套来实现。

在循环操作中，有时候循环还没有全部完成，就需要被中断，可以通过break和continue等关键字来实现。break实现的是立即退出循环，执行循环后续的操作，在循环嵌套中，break往往被用来退出内层循环。而continue实现的是终止本次循环操作，进而继续进行下一轮的循环。

循环结构在Python开发中，使用频率非常高，希望读者可以多加以理解，并做到灵活运用。

.. _练习题目-4:

5.8 练习题目
------------

一、填空题

1.在循环体中使用___________语句可以跳出循环体。

2.在循环体中可以使用_____________语句跳过本次循环后面的代码，重新开始下一轮循环。

3.如果希望循环是无限的，可以通过设置条件表达式永远为_________来实现无限循环。

二、选择题

1.下列选项中，屏幕会输出1,2,3三个数字的是（ ）。

A. for i in range(3): B. for i in range(2):

print(i) print( i + 1)

C. aList = [0,1,2] D. i = 1

for i in aList: while i< 3:

print( i + 1) print(i)

i = i + 1

2.阅读下面的代码：

sum = 0

for i in range(100):

if(i%10):

continue

sum = sum + i

print(sum)

上述程序的执行结果是（ ）。

A. 5050 B. 4950 C. 450 D. 45

三、程序题

1.编写一个程序，使用for循环输出0~10之间的整数。

2.输入一个正整数，按相反的数字顺序输出另一个数。例如输入1234，则输出4321。

3.输入两个正整数，找出它们的最大公约数。

4.输入两个正整数，找出它们的最小公倍数。

5.蜘蛛、蜻蜓、蝉三种动物，共18只，共有腿118条，共有翅膀20对，请问有多少只蜻蜓？

6.对一个正整数分解质因数，例如输入90，则屏幕上打印出90=2*3*3*5。
